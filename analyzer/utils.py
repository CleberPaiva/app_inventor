import zipfile
import os
import tempfile
from PIL import Image
from django.core.files.base import ContentFile
from django.core.files.storage import default_storage
from django.utils import timezone
from .models import AiaFile, ImageAsset, UsabilityEvaluation
import shutil
import xml.etree.ElementTree as ET
from pathlib import Path
import hashlib
import json
import re
try:
    import wcag_contrast_ratio
    import colour
    COLOR_ANALYSIS_AVAILABLE = True
except ImportError:
    COLOR_ANALYSIS_AVAILABLE = False
    print("‚ö†Ô∏è Bibliotecas de an√°lise de cor n√£o dispon√≠veis. Instale: pip install wcag-contrast-ratio colour-science")

# Dicion√°rio global para armazenar os √≠cones do Material Design
MATERIAL_ICONS_DB = {}

# Configura√ß√µes dos √≠cones Material Design
MATERIAL_ICON_STYLES = {
    'materialicons': 'filled',
    'materialiconsoutlined': 'outlined', 
    'materialiconsround': 'round',
    'materialiconssharp': 'sharp',
    'materialiconstwotone': 'twotone'
}


def load_material_icons():
    """
    Carrega todos os √≠cones do Material Design da estrutura source/src/
    
    Estrutura esperada:
    source/src/categoria/nome_do_icone/estilo/arquivo.svg
    
    Exemplo:
    source/src/action/home/materialicons/24px.svg
    source/src/action/home/materialiconsoutlined/24px.svg
    """
    global MATERIAL_ICONS_DB
    
    # Caminho para os √≠cones (relativo ao diret√≥rio do projeto)
    base_path = Path(__file__).parent.parent / 'source' / 'src'
    
    if not base_path.exists():
        print(f"‚ö†Ô∏è  Diret√≥rio de √≠cones n√£o encontrado: {base_path}")
        return
    
    icon_count = 0
    category_count = 0
    
    try:
        # Percorre todas as categorias
        for category_path in base_path.iterdir():
            if not category_path.is_dir():
                continue
                
            category_name = category_path.name
            category_count += 1
            
            # Percorre todos os √≠cones na categoria
            for icon_path in category_path.iterdir():
                if not icon_path.is_dir():
                    continue
                    
                icon_name = icon_path.name
                
                # Inicializa entrada para o √≠cone se n√£o existir
                if category_name not in MATERIAL_ICONS_DB:
                    MATERIAL_ICONS_DB[category_name] = {}
                    
                if icon_name not in MATERIAL_ICONS_DB[category_name]:
                    MATERIAL_ICONS_DB[category_name][icon_name] = {}
                
                # Percorre todos os estilos do √≠cone
                for style_path in icon_path.iterdir():
                    if not style_path.is_dir():
                        continue
                        
                    style_dir_name = style_path.name
                    style_name = MATERIAL_ICON_STYLES.get(style_dir_name, style_dir_name)
                    
                    # Procura arquivo SVG no diret√≥rio do estilo
                    svg_files = list(style_path.glob('*.svg'))
                    
                    if svg_files:
                        svg_file = svg_files[0]  # Pega o primeiro arquivo SVG encontrado
                        
                        try:
                            # L√™ e processa o arquivo SVG
                            svg_content = svg_file.read_text(encoding='utf-8')
                            
                            # Extrai informa√ß√µes b√°sicas do SVG
                            svg_info = parse_svg_info(svg_content)
                            
                            # Armazena as informa√ß√µes do √≠cone
                            MATERIAL_ICONS_DB[category_name][icon_name][style_name] = {
                                'path': str(svg_file),
                                'content': svg_content,
                                'viewBox': svg_info.get('viewBox', '0 0 24 24'),
                                'width': svg_info.get('width', '24'),
                                'height': svg_info.get('height', '24'),
                                'hash': hashlib.md5(svg_content.encode()).hexdigest()
                            }
                            
                            icon_count += 1
                            
                        except Exception as e:
                            print(f"‚ö†Ô∏è  Erro ao processar {svg_file}: {e}")
                            continue
        
        print(f"‚úÖ Material Icons carregados: {icon_count} √≠cones em {category_count} categorias")
        
        # Salva cache dos √≠cones carregados
        save_icons_cache()
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar Material Icons: {e}")


def parse_svg_info(svg_content):
    """
    Extrai informa√ß√µes b√°sicas de um arquivo SVG
    """
    try:
        root = ET.fromstring(svg_content)
        
        # Remove namespace se presente
        if root.tag.startswith('{'):
            root.tag = root.tag.split('}')[1]
        
        info = {}
        
        # Extrai atributos principais
        info['viewBox'] = root.get('viewBox', '0 0 24 24')
        info['width'] = root.get('width', '24')
        info['height'] = root.get('height', '24')
        
        return info
        
    except ET.ParseError as e:
        print(f"‚ö†Ô∏è  Erro ao fazer parse do SVG: {e}")
        return {'viewBox': '0 0 24 24', 'width': '24', 'height': '24'}


def save_icons_cache():
    """
    Salva cache dos √≠cones carregados para acelerar pr√≥ximas execu√ß√µes
    """
    try:
        cache_path = Path(__file__).parent.parent / 'material_icons_cache.json'
        
        # Prepara dados para serializa√ß√£o (remove conte√∫do SVG para reduzir tamanho)
        cache_data = {}
        for category, icons in MATERIAL_ICONS_DB.items():
            cache_data[category] = {}
            for icon_name, styles in icons.items():
                cache_data[category][icon_name] = {}
                for style_name, info in styles.items():
                    cache_data[category][icon_name][style_name] = {
                        'path': info['path'],
                        'viewBox': info['viewBox'],
                        'width': info['width'],
                        'height': info['height'],
                        'hash': info['hash']
                    }
        
        with open(cache_path, 'w', encoding='utf-8') as f:
            json.dump(cache_data, f, indent=2, ensure_ascii=False)
            
        print(f"üíæ Cache salvo em: {cache_path}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao salvar cache: {e}")


def load_icons_cache():
    """
    Carrega cache dos √≠cones se dispon√≠vel
    """
    try:
        cache_path = Path(__file__).parent.parent / 'material_icons_cache.json'
        
        if not cache_path.exists():
            return False
            
        with open(cache_path, 'r', encoding='utf-8') as f:
            cache_data = json.load(f)
        
        global MATERIAL_ICONS_DB
        MATERIAL_ICONS_DB = cache_data
        
        # Conta √≠cones carregados
        icon_count = sum(len(styles) for icons in MATERIAL_ICONS_DB.values() for styles in icons.values())
        print(f"üíæ Cache carregado: {icon_count} √≠cones")
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao carregar cache: {e}")
        return False


def find_similar_material_icon(image_asset, similarity_threshold=0.8):
    """
    Encontra √≠cones do Material Design similares a um √≠cone do app
    """
    if not MATERIAL_ICONS_DB:
        if not load_icons_cache():
            load_material_icons()
    
    if not MATERIAL_ICONS_DB:
        return None
    
    # Para demonstra√ß√£o, vamos usar caracter√≠sticas b√°sicas
    # Em uma implementa√ß√£o real, voc√™ usaria compara√ß√£o visual mais sofisticada
    
    results = []
    icon_name_lower = image_asset.name.lower()
    
    # Busca por nome similar
    for category, icons in MATERIAL_ICONS_DB.items():
        for icon_name, styles in icons.items():
            # Verifica se o nome √© similar
            if icon_name.lower() in icon_name_lower or icon_name_lower in icon_name.lower():
                for style_name, info in styles.items():
                    results.append({
                        'category': category,
                        'name': icon_name,
                        'style': style_name,
                        'similarity': 0.9,  # Placeholder - implementar algoritmo real
                        'path': info['path'],
                        'hash': info['hash']
                    })
    
    # Filtra por threshold e ordena por similaridade
    results = [r for r in results if r['similarity'] >= similarity_threshold]
    results.sort(key=lambda x: x['similarity'], reverse=True)
    
    return results[:5]  # Retorna top 5 matches


def analyze_icon_against_material_design(image_asset):
    """
    Analisa um √≠cone do app contra os padr√µes do Material Design
    """
    if image_asset.asset_type != 'icon':
        return None
    
    # Carrega √≠cones se necess√°rio
    if not MATERIAL_ICONS_DB:
        if not load_icons_cache():
            load_material_icons()
    
    analysis = {
        'follows_material_guidelines': False,
        'recommended_size': '24dp (72px)',
        'size_score': 0,
        'material_matches': [],
        'recommendations': []
    }
    
    # Verifica tamanho recomendado (m√∫ltiplos de 24px para Material Design)
    width, height = image_asset.width, image_asset.height
    
    # Material Design recomenda m√∫ltiplos de 24px (24, 48, 72, 96, etc.)
    material_sizes = [24, 48, 72, 96, 144, 192]
    closest_size = min(material_sizes, key=lambda x: abs(x - max(width, height)))
    
    if abs(max(width, height) - closest_size) <= 4:  # Toler√¢ncia de 4px
        analysis['size_score'] = 100
        analysis['follows_material_guidelines'] = True
    elif width == height:  # Pelo menos √© quadrado
        analysis['size_score'] = 70
    else:
        analysis['size_score'] = 30
        analysis['recommendations'].append(
            f"√çcone deveria ser quadrado e usar tamanhos padr√£o do Material Design (24, 48, 72px, etc.)"
        )
    
    # Procura por √≠cones similares
    similar_icons = find_similar_material_icon(image_asset)
    if similar_icons:
        analysis['material_matches'] = similar_icons
        analysis['recommendations'].append(
            f"Encontrados {len(similar_icons)} √≠cones similares no Material Design. "
            "Considere usar um √≠cone padr√£o para melhor consist√™ncia."
        )
    else:
        analysis['recommendations'].append(
            "Nenhum √≠cone similar encontrado no Material Design. "
            "Certifique-se de que o √≠cone segue as diretrizes visuais do Material Design."
        )
    
    return analysis


def analyze_aia_file(aia_file):
    """
    Extract and analyze images from an .aia file
    .aia files are ZIP archives containing App Inventor project files
    """
    
    # Create temporary directory for extraction
    with tempfile.TemporaryDirectory() as temp_dir:
        # Extract .aia file (it's a ZIP)
        with zipfile.ZipFile(aia_file.file.path, 'r') as zip_ref:
            zip_ref.extractall(temp_dir)
        
        # Find and process images
        image_extensions = ['.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp']
        image_count = 0
        icon_count = 0
        
        # Clear existing images for this file
        aia_file.images.all().delete()
        
        # Analyze layout and spacing from .scm files
        layout_analysis = analyze_layout_and_spacing(temp_dir)
        
        # Walk through extracted files
        for root, dirs, files in os.walk(temp_dir):
            for file in files:
                file_path = os.path.join(root, file)
                file_ext = os.path.splitext(file)[1].lower()
                
                if file_ext in image_extensions:
                    try:
                        # Process the image
                        image_asset = process_image_file(
                            file_path, 
                            file, 
                            aia_file, 
                            os.path.relpath(file_path, temp_dir)
                        )
                        
                        if image_asset:
                            image_count += 1
                            if is_icon(file, image_asset):
                                icon_count += 1
                                image_asset.asset_type = 'icon'
                                image_asset.save()
                    
                    except Exception as e:
                        print(f"Error processing image {file}: {str(e)}")
                        continue
        
        # Update file analysis status
        aia_file.total_images = image_count
        aia_file.total_icons = icon_count
        aia_file.is_analyzed = True
        aia_file.analysis_completed_at = timezone.now()
        aia_file.save()
        
        # Tarefa 4.1: Analisar consist√™ncia de estilo dos √≠cones Material Design
        icon_analysis = analyze_icon_style_consistency(aia_file)
        
        # Generate usability evaluation with layout analysis and icon analysis
        generate_usability_evaluation(aia_file, layout_analysis, icon_analysis)


def process_image_file(file_path, filename, aia_file, relative_path):
    """Process a single image file and create ImageAsset record"""
    
    try:
        with Image.open(file_path) as img:
            # Get image properties
            width, height = img.size
            format_name = img.format or 'UNKNOWN'
            file_size = os.path.getsize(file_path)
            
            # Create ImageAsset record
            image_asset = ImageAsset(
                aia_file=aia_file,
                name=filename,
                original_path=relative_path,
                width=width,
                height=height,
                file_size=file_size,
                format=format_name
            )
            
            # Copy image to media directory
            with open(file_path, 'rb') as f:
                image_content = ContentFile(f.read())
                image_asset.extracted_file.save(
                    f"{aia_file.id}_{filename}",
                    image_content,
                    save=False
                )
            
            # Analyze image quality
            analyze_image_quality(image_asset, img)
            
            # Determine asset type
            image_asset.asset_type = determine_asset_type(filename, width, height)
            
            # Tarefa 4.1: Verificar se √© um √≠cone Material Design e identificar estilo
            if image_asset.asset_type == 'icon':
                material_style = identify_material_icon(image_asset)
                if material_style:
                    image_asset.is_material_icon = True
                    image_asset.material_icon_style = material_style
                else:
                    image_asset.is_material_icon = False
            
            image_asset.save()
            return image_asset
            
    except Exception as e:
        print(f"Error processing image {filename}: {str(e)}")
        return None


def calculate_asset_quality_score(asset):
    """
    Calcula uma pontua√ß√£o de qualidade de 0 a 100 para um √∫nico asset (imagem ou √≠cone).
    Sistema de pontua√ß√£o granular baseado em m√∫ltiplos crit√©rios ponderados.
    """
    score = 0
    max_score = 100
    
    # Crit√©rio 1: Resolu√ß√£o (Peso 40)
    min_resolution = 128  # M√≠nimo para √≠cones
    ideal_resolution = 512  # Ideal para imagens
    total_pixels = asset.width * asset.height
    
    if asset.width >= ideal_resolution and asset.height >= ideal_resolution:
        score += 40  # Resolu√ß√£o excelente
    elif asset.width >= min_resolution and asset.height >= min_resolution:
        # Pontua√ß√£o proporcional entre m√≠nimo e ideal
        pixel_ratio = min(total_pixels / (ideal_resolution * ideal_resolution), 1.0)
        score += 20 + (20 * pixel_ratio)  # 20-40 pontos baseado na propor√ß√£o
    else:
        # Penaliza√ß√£o proporcional para resolu√ß√µes muito baixas
        pixel_ratio = total_pixels / (min_resolution * min_resolution)
        score += max(0, 20 * pixel_ratio)  # 0-20 pontos baseado na propor√ß√£o
        
    # Crit√©rio 2: Otimiza√ß√£o do Arquivo (Bytes por Pixel) (Peso 30)
    bpp = asset.bytes_per_pixel if asset.bytes_per_pixel is not None else 0
    if 1 <= bpp <= 4:  # Bem otimizado
        score += 30
    elif 0.5 <= bpp < 1:  # Levemente comprimido mas aceit√°vel
        score += 25
    elif 4 < bpp <= 8:  # Um pouco grande mas ainda aceit√°vel
        score += 20
    elif bpp > 8:  # Muito grande
        score += 10
    elif bpp > 0.1:  # Comprimido mas ainda utiliz√°vel
        score += 15
    else:  # Muito comprimido ou corrupto
        score += 5

    # Crit√©rio 3: Propor√ß√£o (Peso 20)
    if asset.width > 0 and asset.height > 0:
        ratio = max(asset.width, asset.height) / min(asset.width, asset.height)
        
        if 1 <= ratio <= 2:  # Propor√ß√µes ideais (1:1, 4:3, 16:9)
            score += 20
        elif ratio <= 3:  # Propor√ß√µes aceit√°veis
            score += 15
        elif ratio <= 5:  # Propor√ß√µes pobres mas utiliz√°veis
            score += 10
        else:  # Propor√ß√µes muito ruins
            score += 5
    else:
        score += 5  # Erro nos dados de dimens√£o

    # Crit√©rio 4: Conformidade com Material Design (apenas para √≠cones) (Peso 10)
    if asset.asset_type == 'icon':
        # Verifica se segue diretrizes do Material Design
        material_analysis = analyze_icon_against_material_design(asset)
        if material_analysis:
            # Converte o size_score (0-100) para escala de 10 pontos
            material_score = (material_analysis['size_score'] / 100) * 10
            score += material_score
        else:
            # Se n√£o conseguiu analisar, d√° pontua√ß√£o parcial
            score += 5
    else:
        # Se n√£o for um √≠cone, este crit√©rio n√£o se aplica, ent√£o damos os pontos
        score += 10

    return min(round(score), max_score)  # Garante que a nota n√£o passe de 100


def calculate_overall_scores(assets):
    """
    Calcula os scores de qualidade para imagens, √≠cones e o geral, usando a nova l√≥gica granular.
    """
    if not assets:
        # Se n√£o h√° assets, retorna 100 (projeto limpo)
        return {
            "overall_score": 100,
            "image_quality_score": 100,
            "icon_quality_score": 100,
        }
    
    # Separa assets por tipo
    image_assets = [asset for asset in assets if asset.asset_type in ['image', 'background', 'button', 'other']]
    icon_assets = [asset for asset in assets if asset.asset_type == 'icon']

    # Calcula scores individuais para cada asset
    all_scores = [calculate_asset_quality_score(asset) for asset in assets]
    image_scores = [calculate_asset_quality_score(asset) for asset in image_assets] if image_assets else []
    icon_scores = [calculate_asset_quality_score(asset) for asset in icon_assets] if icon_assets else []

    # Score geral: m√©dia de todos os assets
    overall_score = sum(all_scores) / len(all_scores)

    # Scores por categoria: m√©dia de cada categoria, ou 100 se n√£o houver assets na categoria
    image_quality_score = sum(image_scores) / len(image_scores) if image_scores else 100
    icon_quality_score = sum(icon_scores) / len(icon_scores) if icon_scores else 100

    return {
        "overall_score": round(overall_score, 1),
        "image_quality_score": round(image_quality_score, 1),
        "icon_quality_score": round(icon_quality_score, 1),
    }


def analyze_image_quality(image_asset, pil_image):
    """Analyze image quality and set quality metrics using the new granular scoring system"""
    
    # Calcula o score granular usando a nova fun√ß√£o
    quality_score = calculate_asset_quality_score(image_asset)
    
    # Determina a classifica√ß√£o qualitativa baseada no score num√©rico
    if quality_score >= 85:
        quality_rating = 'excellent'
    elif quality_score >= 70:
        quality_rating = 'high'
    elif quality_score >= 50:
        quality_rating = 'medium'
    else:
        quality_rating = 'low'
    
    # Calcula m√©tricas auxiliares
    width = image_asset.width
    height = image_asset.height
    file_size = image_asset.file_size
    total_pixels = width * height
    bytes_per_pixel = file_size / total_pixels if total_pixels > 0 else 0
    
    # Aspect ratio check (mobile-friendly ratios)
    aspect_ratio = width / height if height > 0 else 0
    mobile_friendly_ratios = [16/9, 4/3, 3/2, 1/1, 9/16]  # Common mobile ratios
    ratio_match = any(abs(aspect_ratio - ratio) < 0.1 for ratio in mobile_friendly_ratios)
    
    # Set all calculated values
    image_asset.quality_score = quality_score
    image_asset.quality_rating = quality_rating
    image_asset.resolution_adequate = total_pixels >= 640 * 480
    image_asset.aspect_ratio_appropriate = ratio_match
    image_asset.file_size_optimized = 1 <= bytes_per_pixel <= 6


def determine_asset_type(filename, width, height):
    """Determine the type of asset based on filename and dimensions"""
    
    filename_lower = filename.lower()
    
    # Check for common icon patterns
    if any(keyword in filename_lower for keyword in ['icon', 'ico', 'button', 'btn']):
        return 'icon'
    
    # Check for background patterns
    if any(keyword in filename_lower for keyword in ['background', 'bg', 'wallpaper']):
        return 'background'
    
    # Check dimensions for icons (typically small and square-ish)
    if width <= 128 and height <= 128 and abs(width - height) <= 32:
        return 'icon'
    
    # Check for button-like dimensions
    if (width > height and width <= 300 and height <= 100) or \
       (height > width and height <= 300 and width <= 100):
        return 'button'
    
    # Large images are likely backgrounds
    if width >= 800 or height >= 600:
        return 'background'
    
    return 'image'


def is_icon(filename, image_asset):
    """Determine if an image is likely an icon"""
    return image_asset.asset_type == 'icon' or \
           (image_asset.width <= 128 and image_asset.height <= 128)


def generate_usability_evaluation(aia_file, layout_analysis=None, icon_analysis=None):
    """Generate comprehensive usability evaluation for the app using new granular scoring"""
    
    images = aia_file.images.all()
    
    if not images.exists():
        # Se n√£o h√° imagens, cria avalia√ß√£o com scores m√°ximos
        recommendations = ['‚Ä¢ ‚ú® Projeto sem assets visuais - nenhum problema detectado.']
        
        # Adicionar recomenda√ß√µes de layout se dispon√≠vel
        if layout_analysis:
            layout_recommendations = generate_layout_recommendations(layout_analysis)
            recommendations.extend(layout_recommendations)
        
        # Adicionar recomenda√ß√µes de √≠cones se dispon√≠vel
        if icon_analysis and icon_analysis.get('issues'):
            recommendations.append('\nüé® **An√°lise de √çcones Material Design:**')
            recommendations.extend(icon_analysis['issues'])
        
        evaluation, created = UsabilityEvaluation.objects.get_or_create(
            aia_file=aia_file,
            defaults={
                'image_quality_score': 100,
                'icon_quality_score': 100,
                'overall_usability_score': 100,
                'high_quality_images_count': 0,
                'low_quality_images_count': 0,
                'oversized_images_count': 0,
                'undersized_images_count': 0,
                'recommendations': '\n'.join(recommendations),
            }
        )
        return
    
    # Calcula scores usando a nova l√≥gica granular
    scores = calculate_overall_scores(list(images))
    
    # Aplicar penaliza√ß√£o por inconsist√™ncia de √≠cones
    if icon_analysis and icon_analysis.get('has_style_inconsistency', False):
        # Reduzir pontua√ß√£o de √≠cones em 20 pontos por inconsist√™ncia
        scores['icon_quality_score'] = max(0, scores['icon_quality_score'] - 20)
        # Reduzir pontua√ß√£o geral proportionalmente
        scores['overall_score'] = (scores['image_quality_score'] + scores['icon_quality_score']) / 2
    
    # Calculate detailed metrics
    total_images = images.count()
    high_quality_count = images.filter(quality_rating__in=['high', 'excellent']).count()
    low_quality_count = images.filter(quality_rating='low').count()
    oversized_count = images.filter(file_size__gt=1024*1024).count()  # > 1MB
    undersized_count = images.filter(width__lt=100, height__lt=100).count()
    
    # Generate comprehensive usability report
    recommendations = generate_comprehensive_usability_report(aia_file, list(images), scores, layout_analysis, icon_analysis)
    
    # Adicionar recomenda√ß√µes de layout se dispon√≠vel
    if layout_analysis:
        layout_recommendations = generate_layout_recommendations(layout_analysis)
        if layout_recommendations:
            recommendations += '\n\nüèóÔ∏è **An√°lise de Layout e Interface:**\n' + '\n'.join(layout_recommendations)
    
    # Adicionar recomenda√ß√µes de √≠cones se dispon√≠vel
    if icon_analysis and icon_analysis.get('issues'):
        recommendations += '\n\nüé® **An√°lise de Consist√™ncia de √çcones:**\n' + '\n'.join(icon_analysis['issues'])
    
    # Create or update evaluation
    evaluation, created = UsabilityEvaluation.objects.get_or_create(
        aia_file=aia_file,
        defaults={
            'image_quality_score': scores['image_quality_score'],
            'icon_quality_score': scores['icon_quality_score'],
            'overall_usability_score': scores['overall_score'],
            'high_quality_images_count': high_quality_count,
            'low_quality_images_count': low_quality_count,
            'oversized_images_count': oversized_count,
            'undersized_images_count': undersized_count,
            'recommendations': recommendations,
        }
    )
    
    if not created:
        # Update existing evaluation
        evaluation.image_quality_score = scores['image_quality_score']
        evaluation.icon_quality_score = scores['icon_quality_score']
        evaluation.overall_usability_score = scores['overall_score']
        evaluation.high_quality_images_count = high_quality_count
        evaluation.low_quality_images_count = low_quality_count
        evaluation.oversized_images_count = oversized_count
        evaluation.undersized_images_count = undersized_count
        evaluation.recommendations = recommendations
        evaluation.save()


def generate_comprehensive_usability_report(aia_file, images, scores, layout_analysis=None, icon_analysis=None):
    """
    Gera um relat√≥rio completo de an√°lise de usabilidade explicando cada pontua√ß√£o
    e crit√©rio de avalia√ß√£o utilizado
    """
    report_sections = []
    
    # === CABE√áALHO DO RELAT√ìRIO ===
    report_sections.append(f"""
üìä **RELAT√ìRIO DE AN√ÅLISE DE USABILIDADE**
Arquivo: {aia_file.name}
Data da An√°lise: {timezone.now().strftime('%d/%m/%Y √†s %H:%M')}
Total de Assets Analisados: {images.count()}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
""")

    # === PONTUA√á√ÉO GERAL ===
    overall_score = scores['overall_score']
    if overall_score >= 90:
        grade = "üèÜ EXCELENTE"
        grade_desc = "Aplicativo com qualidade excepcional"
    elif overall_score >= 80:
        grade = "ü•á MUITO BOM"
        grade_desc = "Aplicativo com alta qualidade"
    elif overall_score >= 70:
        grade = "ü•à BOM"
        grade_desc = "Aplicativo com qualidade satisfat√≥ria"
    elif overall_score >= 60:
        grade = "ü•â RAZO√ÅVEL"
        grade_desc = "Aplicativo precisa de melhorias"
    else:
        grade = "‚ùå INSATISFAT√ìRIO"
        grade_desc = "Aplicativo precisa de revis√£o completa"

    report_sections.append(f"""
üéØ **AVALIA√á√ÉO GERAL: {overall_score:.1f}/100 - {grade}**
{grade_desc}

üìä **BREAKDOWN DA PONTUA√á√ÉO:**
‚Ä¢ Qualidade de Imagens: {scores['image_quality_score']:.1f}/100
‚Ä¢ Qualidade de √çcones: {scores['icon_quality_score']:.1f}/100
‚Ä¢ Score Final: ({scores['image_quality_score']:.1f} + {scores['icon_quality_score']:.1f}) √∑ 2 = {overall_score:.1f}

""")

    # === AN√ÅLISE DETALHADA POR CATEGORIA ===
    
    # An√°lise de Imagens
    image_assets = [asset for asset in images if asset.asset_type in ['image', 'background', 'button', 'other']]
    if image_assets:
        report_sections.append(generate_image_quality_analysis(image_assets, scores['image_quality_score']))
    
    # An√°lise de √çcones
    icon_assets = [asset for asset in images if asset.asset_type == 'icon']
    if icon_assets:
        report_sections.append(generate_icon_quality_analysis(icon_assets, scores['icon_quality_score'], icon_analysis))
    
    # === AN√ÅLISE ACAD√äMICA (LAYOUT, TIPOGRAFIA, CORES) ===
    if layout_analysis:
        report_sections.append(generate_academic_analysis_report(layout_analysis))
    
    # === RECOMENDA√á√ïES ESPEC√çFICAS ===
    recommendations = generate_detailed_recommendations(aia_file, images, scores)
    if recommendations:
        report_sections.append(f"""
üí° **RECOMENDA√á√ïES PARA MELHORIA:**

{chr(10).join(recommendations)}
""")

    # === CONCLUS√ÉO ===
    report_sections.append(f"""
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚úÖ **RESUMO EXECUTIVO:**
Este relat√≥rio avaliou {images.count()} asset(s) usando crit√©rios acad√™micos baseados em:
‚Ä¢ Resolu√ß√£o e otimiza√ß√£o de arquivos (40% da nota)
‚Ä¢ Propor√ß√µes adequadas para dispositivos m√≥veis (30% da nota)  
‚Ä¢ Consist√™ncia visual e padr√µes de design (30% da nota)

üìö **BASE ACAD√äMICA:**
An√°lise baseada em Nascimento & Brehm (2022), Solecki (2020), e diretrizes 
WCAG 2.1 AA para garantir qualidade educacional e acessibilidade.

üéì **OBJETIVO EDUCACIONAL:**
Este sistema foi desenvolvido para auxiliar estudantes a compreender 
boas pr√°ticas de design de interface m√≥vel no contexto do App Inventor.
""")

    return '\n'.join(report_sections)


def generate_image_quality_analysis(image_assets, image_score):
    """Gera an√°lise detalhada da qualidade das imagens"""
    if not image_assets:
        return ""
    
    # Calcular estat√≠sticas
    total_images = len(image_assets)
    excellent_count = len([img for img in image_assets if calculate_asset_quality_score(img) >= 85])
    good_count = len([img for img in image_assets if 70 <= calculate_asset_quality_score(img) < 85])
    medium_count = len([img for img in image_assets if 50 <= calculate_asset_quality_score(img) < 70])
    poor_count = len([img for img in image_assets if calculate_asset_quality_score(img) < 50])
    
    # An√°lise de tamanhos
    oversized = len([img for img in image_assets if img.file_size > 1024*1024])
    undersized = len([img for img in image_assets if img.width < 300 or img.height < 300])
    
    return f"""
üñºÔ∏è **AN√ÅLISE DE QUALIDADE DAS IMAGENS: {image_score:.1f}/100**

üìä **DISTRIBUI√á√ÉO POR QUALIDADE:**
‚Ä¢ Excelente (85-100): {excellent_count}/{total_images} imagens ({excellent_count/total_images*100:.1f}%)
‚Ä¢ Boa (70-84): {good_count}/{total_images} imagens ({good_count/total_images*100:.1f}%)
‚Ä¢ M√©dia (50-69): {medium_count}/{total_images} imagens ({medium_count/total_images*100:.1f}%)
‚Ä¢ Baixa (<50): {poor_count}/{total_images} imagens ({poor_count/total_images*100:.1f}%)

üîç **CRIT√âRIOS DE AVALIA√á√ÉO:**
1. **Resolu√ß√£o (40% da nota):** Imagens devem ter pelo menos 640√ó480px
2. **Otimiza√ß√£o (30% da nota):** 1-4 bytes por pixel indica boa compress√£o
3. **Propor√ß√µes (30% da nota):** Adequadas para dispositivos m√≥veis

‚ö†Ô∏è **PROBLEMAS DETECTADOS:**
‚Ä¢ {oversized} imagem(ns) muito pesada(s) (>1MB)
‚Ä¢ {undersized} imagem(ns) com resolu√ß√£o muito baixa

üìà **COMO MELHORAR A PONTUA√á√ÉO:**
‚Ä¢ Resolu√ß√£o ideal: 1920√ó1080px ou superior para imagens principais
‚Ä¢ Compress√£o: Use ferramentas como TinyPNG para otimizar sem perder qualidade
‚Ä¢ Formato: PNG para √≠cones e logos, JPEG para fotos
"""


def generate_icon_quality_analysis(icon_assets, icon_score, icon_analysis=None):
    """Gera an√°lise detalhada da qualidade dos √≠cones"""
    if not icon_assets:
        return ""
    
    total_icons = len(icon_assets)
    material_icons = len([icon for icon in icon_assets if hasattr(icon, 'is_material_icon') and icon.is_material_icon])
    
    # An√°lise de tamanhos
    standard_sizes = [24, 48, 72, 96, 128, 192, 256, 512]
    standard_count = len([icon for icon in icon_assets if icon.width in standard_sizes and icon.height in standard_sizes])
    square_count = len([icon for icon in icon_assets if icon.width == icon.height])
    
    # Penaliza√ß√£o por inconsist√™ncia
    consistency_penalty = ""
    if icon_analysis and icon_analysis.get('has_style_inconsistency', False):
        styles_used = icon_analysis.get('stats', {}).get('styles_used', [])
        consistency_penalty = f"\n‚ùå **PENALIZA√á√ÉO APLICADA:** -20 pontos por inconsist√™ncia de estilos Material Design\n‚Ä¢ Estilos encontrados: {', '.join(styles_used)}"
    
    return f"""
üé® **AN√ÅLISE DE QUALIDADE DOS √çCONES: {icon_score:.1f}/100**

ÔøΩ **ESTAT√çSTICAS GERAIS:**
‚Ä¢ Total de √≠cones: {total_icons}
‚Ä¢ √çcones Material Design detectados: {material_icons}/{total_icons}
‚Ä¢ √çcones quadrados: {square_count}/{total_icons} ({square_count/total_icons*100:.1f}%)
‚Ä¢ √çcones em tamanhos padr√£o: {standard_count}/{total_icons} ({standard_count/total_icons*100:.1f}%)

üîç **CRIT√âRIOS DE AVALIA√á√ÉO:**
1. **Resolu√ß√£o (40% da nota):** √çcones devem ter pelo menos 128√ó128px
2. **Padr√£o Material Design (30% da nota):** Tamanhos m√∫ltiplos de 24px
3. **Consist√™ncia (30% da nota):** Formato quadrado e estilo uniforme
{consistency_penalty}

üìê **TAMANHOS RECOMENDADOS (Material Design):**
‚Ä¢ Interface: 24px, 48px (densidade padr√£o)
‚Ä¢ Launcher: 48dp, 72dp, 96dp, 144dp, 192dp
‚Ä¢ Densidade alta: 36px, 72px, 108px

üìà **COMO MELHORAR A PONTUA√á√ÉO:**
‚Ä¢ Use apenas um estilo Material Design por aplicativo
‚Ä¢ Mantenha propor√ß√µes quadradas (1:1)
‚Ä¢ Prefira tamanhos padr√£o: 24, 48, 72, 96, 128, 192, 256px
‚Ä¢ Use SVG quando poss√≠vel para escalabilidade perfeita
"""


def generate_academic_analysis_report(layout_analysis):
    """Gera relat√≥rio da an√°lise acad√™mica (layout, tipografia, cores)"""
    if not layout_analysis:
        return ""
    
    screens_analyzed = layout_analysis.get('screens_analyzed', 0)
    has_margin_issues = layout_analysis.get('has_margin_issues', False)
    has_spacing_issues = layout_analysis.get('has_spacing_issues', False)
    has_font_issues = layout_analysis.get('has_font_issues', False)
    has_bold_issues = layout_analysis.get('has_bold_issues', False)
    has_contrast_issues = layout_analysis.get('has_contrast_issues', False)
    has_saturation_issues = layout_analysis.get('has_saturation_issues', False)
    
    # Calcular score acad√™mico
    total_issues = sum([has_margin_issues, has_spacing_issues, has_font_issues, 
                       has_bold_issues, has_contrast_issues, has_saturation_issues])
    academic_score = max(0, 100 - (total_issues * 15))  # -15 pontos por problema
    
    if academic_score >= 90:
        academic_grade = "üèÜ EXCELENTE"
    elif academic_score >= 75:
        academic_grade = "ü•á MUITO BOM"  
    elif academic_score >= 60:
        academic_grade = "ü•à BOM"
    else:
        academic_grade = "‚ùå PRECISA MELHORAR"
    
    return f"""
üéì **AN√ÅLISE ACAD√äMICA: {academic_score}/100 - {academic_grade}**
Baseada em Nascimento & Brehm (2022) e Solecki (2020)

üìä **TELAS ANALISADAS:** {screens_analyzed}

üèóÔ∏è **LAYOUT E ESPA√áAMENTO (Parte 1):**
‚Ä¢ Margens adequadas: {'‚ùå Problema detectado' if has_margin_issues else '‚úÖ Adequadas'}
‚Ä¢ Espa√ßamento entre elementos: {'‚ùå Problema detectado' if has_spacing_issues else '‚úÖ Adequado'}

üî§ **TIPOGRAFIA (Parte 2):**
‚Ä¢ Consist√™ncia de fontes: {'‚ùå Muitas fontes diferentes' if has_font_issues else '‚úÖ Consistente'}
‚Ä¢ Uso de negrito: {'‚ùå Abuso de negrito detectado' if has_bold_issues else '‚úÖ Uso adequado'}

üé® **CORES (Parte 3):**
‚Ä¢ Contraste WCAG AA: {'‚ùå Problemas de contraste' if has_contrast_issues else '‚úÖ Adequado'}
‚Ä¢ Satura√ß√£o de cores: {'‚ùå Cores muito saturadas' if has_saturation_issues else '‚úÖ Adequada'}

üìö **METODOLOGIA:**
‚Ä¢ **Parte 1:** An√°lise de margens e espa√ßamento baseada em m√∫ltiplos de 8px
‚Ä¢ **Parte 2:** Verifica√ß√£o de consist√™ncia tipogr√°fica e legibilidade
‚Ä¢ **Parte 3:** An√°lise WCAG 2.1 AA (contraste 4.5:1) e detec√ß√£o de cores neon
‚Ä¢ **Parte 4:** Consist√™ncia de √≠cones Material Design

üéØ **PONTUA√á√ÉO:**
Cada problema detectado reduz 15 pontos da nota acad√™mica.
Score atual: 100 - ({total_issues} √ó 15) = {academic_score} pontos
"""


def generate_detailed_recommendations(aia_file, images, scores):
    """Gera recomenda√ß√µes detalhadas baseadas na an√°lise completa"""
    recommendations = []
    
    overall_score = scores['overall_score']
    
    # Recomenda√ß√µes baseadas no score geral
    if overall_score < 70:
        recommendations.append(
            "üö® **A√á√ÉO URGENTE NECESS√ÅRIA:** Score abaixo de 70 indica problemas significativos "
            "que afetam a qualidade do aplicativo. Priorize as corre√ß√µes listadas abaixo."
        )
    elif overall_score < 85:
        recommendations.append(
            "‚ö†Ô∏è **MELHORIAS RECOMENDADAS:** Score pode ser elevado com ajustes espec√≠ficos. "
            "Foque nos problemas de maior impacto listados abaixo."
        )
    else:
        recommendations.append(
            "‚úÖ **QUALIDADE SATISFAT√ìRIA:** Continue mantendo os padr√µes de qualidade. "
            "Pequenos ajustes podem levar √† excel√™ncia."
        )
    
    # An√°lise espec√≠fica por tipo de asset
    poor_assets = [asset for asset in images if calculate_asset_quality_score(asset) < 50]
    if poor_assets:
        recommendations.append(
            f"üî¥ **CR√çTICO:** {len(poor_assets)} asset(s) com score abaixo de 50 necessitam "
            f"aten√ß√£o imediata. Assets cr√≠ticos: {', '.join([asset.name for asset in poor_assets[:3]])}"
            f"{'...' if len(poor_assets) > 3 else ''}"
        )
    
    # Recomenda√ß√µes de otimiza√ß√£o
    oversized = [asset for asset in images if asset.file_size > 1024*1024]
    if oversized:
        total_savings = sum(asset.file_size for asset in oversized) / (1024*1024) * 0.7  # Estimativa de 70% de redu√ß√£o
        recommendations.append(
            f"üíæ **OTIMIZA√á√ÉO:** Comprimir {len(oversized)} imagem(ns) pode reduzir "
            f"aproximadamente {total_savings:.1f}MB do tamanho total do aplicativo."
        )
    
    # Recomenda√ß√µes Material Design
    icons = [asset for asset in images if asset.asset_type == 'icon']
    if icons:
        # Calcular score m√©dio dos √≠cones
        icon_scores = [calculate_asset_quality_score(icon) for icon in icons]
        avg_icon_score = sum(icon_scores) / len(icon_scores) if icon_scores else 0
        
        non_square = [icon for icon in icons if icon.width != icon.height]
        if non_square:
            recommendations.append(
                f"üìê **MATERIAL DESIGN:** {len(non_square)} √≠cone(s) n√£o seguem o padr√£o "
                f"quadrado. Redimensione para formato 1:1 para melhor compatibilidade."
            )
        
        # Overall icon quality assessment
        if avg_icon_score < 70:
            recommendations.append(
                f"üéØ **Score m√©dio dos √≠cones: {avg_icon_score:.1f}/100**. "
                f"Considere usar √≠cones da biblioteca oficial do Material Design para garantir qualidade e consist√™ncia."
            )
        elif avg_icon_score >= 85:
            recommendations.append(
                f"‚ú® **Excelente qualidade dos √≠cones** (score m√©dio: {avg_icon_score:.1f}/100). "
                f"Seus √≠cones seguem bem as diretrizes de design!"
            )
    
    # Overall project assessment
    overall_score = scores['overall_score']
    if overall_score >= 90:
        recommendations.append(
            f"üéâ **Projeto exemplar!** Score geral: {overall_score:.1f}/100. "
            f"Seus assets visuais seguem excelentes padr√µes de qualidade."
        )
    elif overall_score >= 75:
        recommendations.append(
            f"üëç **Boa qualidade geral** (score: {overall_score:.1f}/100). "
            f"Pequenos ajustes podem elevar seu projeto ao n√≠vel de excel√™ncia."
        )
    elif overall_score >= 50:
        recommendations.append(
            f"‚ö†Ô∏è **Qualidade moderada** (score: {overall_score:.1f}/100). "
            f"Foque nos assets com menor pontua√ß√£o para melhorar significativamente o projeto."
        )
    else:
        recommendations.append(
            f"üîß **Projeto precisa de aten√ß√£o** (score: {overall_score:.1f}/100). "
            f"Revise a qualidade dos assets seguindo as recomenda√ß√µes espec√≠ficas acima."
        )
    
    # Material Design promotion
    if icons:
        recommendations.append(
            f"üí° **Dica Pro:** Explore a biblioteca oficial do Material Design "
            f"(https://fonts.google.com/icons) para √≠cones de alta qualidade que seguem "
            f"automaticamente todas as diretrizes de design."
        )
    
    if not recommendations:
        recommendations.append("‚ú® **Perfeito!** Nenhum problema detectado nos assets visuais.")
    
    return '\n'.join(recommendations)


def analyze_layout_and_spacing(temp_dir):
    """
    Analisa layout e espa√ßamento de todos os screens do App Inventor
    baseado nos trabalhos de Nascimento & Brehm (2022)
    """
    layout_issues = []
    typography_issues = []
    screens_analyzed = 0
    all_components = []  # Para an√°lise de tipografia
    
    # Encontrar todos os arquivos .scm
    for root, dirs, files in os.walk(temp_dir):
        for file in files:
            if file.endswith('.scm'):
                file_path = os.path.join(root, file)
                screen_name = os.path.splitext(file)[0]
                
                try:
                    screen_data = parse_scm_file(file_path)
                    if screen_data:
                        screens_analyzed += 1
                        
                        # Coletar todos os componentes para an√°lise de tipografia
                        components = extract_all_components(screen_data)
                        all_components.extend(components)
                        
                        # Verificar margens da tela
                        if not check_screen_margins(screen_data):
                            layout_issues.append(f"Screen {screen_name}: Falta de margens adequadas nas laterais")
                        
                        # Verificar espa√ßamento entre componentes
                        if not check_element_spacing(screen_data):
                            layout_issues.append(f"Screen {screen_name}: Espa√ßamento inadequado entre elementos")
                            
                except Exception as e:
                    print(f"Erro ao analisar {file}: {str(e)}")
                    continue
    
    # An√°lise de tipografia em todos os componentes
    typography_analysis = analyze_typography(all_components)
    
    # An√°lise de cores em todos os componentes
    color_analysis = analyze_colors(all_components)
    
    return {
        'screens_analyzed': screens_analyzed,
        'layout_issues': layout_issues,
        'typography_issues': typography_analysis.get('issues', []),
        'color_issues': color_analysis.get('issues', []),
        'has_margin_issues': any('margens' in issue for issue in layout_issues),
        'has_spacing_issues': any('espa√ßamento' in issue for issue in layout_issues),
        'has_font_issues': typography_analysis.get('has_font_issues', False),
        'has_bold_issues': typography_analysis.get('has_bold_issues', False),
        'has_contrast_issues': color_analysis.get('has_contrast_issues', False),
        'has_saturation_issues': color_analysis.get('has_saturation_issues', False),
        'typography_stats': typography_analysis.get('stats', {}),
        'color_stats': color_analysis.get('stats', {})
    }


def parse_scm_file(file_path):
    """
    Extrai e parseia o conte√∫do JSON de um arquivo .scm do App Inventor
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Os arquivos .scm cont√™m JSON entre markers espec√≠ficos
        json_start = content.find('{')
        json_end = content.rfind('}') + 1
        
        if json_start == -1 or json_end == 0:
            return None
            
        json_content = content[json_start:json_end]
        return json.loads(json_content)
        
    except Exception as e:
        print(f"Erro ao parsear arquivo SCM {file_path}: {str(e)}")
        return None


def check_screen_margins(screen_data):
    """
    Tarefa 1.1: Verificar se os componentes principais na tela possuem 
    uma margem de respiro nas laterais
    
    Verifica se existe um padr√£o de margem adequado na tela
    """
    try:
        properties = screen_data.get('Properties', {})
        components = properties.get('$Components', [])
        
        if not components:
            return True  # Tela vazia, n√£o h√° problema de margem
        
        # Procurar por HorizontalArrangements que funcionem como container principal
        main_containers = []
        for component in components:
            if component.get('$Type') == 'HorizontalArrangement':
                # Verificar se tem largura "Fill Parent" ou similar
                width = component.get('Width', '')
                if (width == 'Fill parent' or width == '-2' or 
                    width == 'Automatic' or width == '' or
                    (isinstance(width, str) and '%' in width and int(width.replace('%', '')) > 80)):
                    main_containers.append(component)
        
        # Se temos containers principais, verificar se eles t√™m estrutura de margem
        if main_containers:
            for container in main_containers:
                if has_margin_structure(container):
                    return True
        
        # Verificar se os componentes principais est√£o muito pr√≥ximos das bordas
        # Se n√£o h√° estrutura de margem expl√≠cita, verificar larguras dos componentes
        total_components = count_interactive_components(components)
        if total_components <= 1:
            return True  # Com poucos componentes, margem √© menos cr√≠tica
        
        # Se h√° muitos componentes sem estrutura de margem, √© um problema
        return False
        
    except Exception as e:
        print(f"Erro ao verificar margens: {str(e)}")
        return True  # Em caso de erro, n√£o penalizar


def has_margin_structure(container):
    """
    Verifica se um container tem estrutura t√≠pica de margem
    """
    sub_components = container.get('$Components', [])
    
    if len(sub_components) == 0:
        return False
    
    # Padr√£o 1: Labels vazios nas laterais funcionando como espa√ßadores
    if len(sub_components) >= 3:
        first = sub_components[0]
        last = sub_components[-1]
        
        # Verificar se primeiro e √∫ltimo s√£o Labels vazios
        if (first.get('$Type') == 'Label' and last.get('$Type') == 'Label' and
            (first.get('Text', '').strip() == '' or first.get('Text', '').strip() == ' ') and
            (last.get('Text', '').strip() == '' or last.get('Text', '').strip() == ' ')):
            return True
    
    # Padr√£o 2: Componente central com largura controlada
    if len(sub_components) == 1:
        central_component = sub_components[0]
        width = central_component.get('Width', '')
        
        # Se o componente central tem largura espec√≠fica (n√£o Fill Parent), pode indicar margem
        if (isinstance(width, str) and width.isdigit() and int(width) < 300) or \
           (isinstance(width, str) and '%' in width and int(width.replace('%', '')) < 90):
            return True
    
    return False


def check_element_spacing(screen_data):
    """
    Tarefa 1.2: Verificar se existe um espa√ßamento vertical m√≠nimo 
    entre os componentes interativos
    
    Procura por Labels vazios ou HorizontalArrangements com altura espec√≠fica 
    que funcionem como espa√ßadores
    """
    try:
        properties = screen_data.get('Properties', {})
        components = properties.get('$Components', [])
        
        if len(components) <= 1:
            return True  # Com poucos componentes, espa√ßamento n√£o √© cr√≠tico
        
        interactive_components = []
        spacer_components = []
        
        # Classificar componentes em interativos e espa√ßadores
        for i, component in enumerate(components):
            component_type = component.get('$Type', '')
            
            # Componentes interativos
            if component_type in ['Button', 'TextBox', 'Slider', 'CheckBox', 
                                'Switch', 'ListView', 'Image', 'ImageSprite']:
                interactive_components.append((i, component))
            
            # Poss√≠veis espa√ßadores
            elif component_type == 'Label':
                text = component.get('Text', '').strip()
                height = component.get('Height', '')
                
                if (text == '' or text == ' ') and height:
                    # Label vazio com altura definida = espa√ßador
                    spacer_components.append((i, component))
                    
            elif component_type == 'HorizontalArrangement':
                height = component.get('Height', '')
                sub_components = component.get('$Components', [])
                
                # HorizontalArrangement vazio com altura = espa√ßador
                if len(sub_components) == 0 and height and is_spacer_height(height):
                    spacer_components.append((i, component))
        
        if len(interactive_components) <= 1:
            return True  # N√£o precisa de espa√ßamento com 1 componente ou menos
        
        # Verificar se h√° espa√ßadores entre componentes interativos
        spacing_found = 0
        for i in range(len(interactive_components) - 1):
            current_pos = interactive_components[i][0]
            next_pos = interactive_components[i + 1][0]
            
            # Verificar se h√° espa√ßador entre os dois componentes interativos
            for spacer_pos, spacer in spacer_components:
                if current_pos < spacer_pos < next_pos:
                    spacing_found += 1
                    break
        
        # Se encontramos espa√ßadores para pelo menos 50% dos gaps, consideramos adequado
        required_spacers = len(interactive_components) - 1
        return spacing_found >= (required_spacers * 0.5)
        
    except Exception as e:
        print(f"Erro ao verificar espa√ßamento: {str(e)}")
        return True  # Em caso de erro, n√£o penalizar


def count_interactive_components(components):
    """
    Conta o n√∫mero de componentes interativos em uma lista de componentes
    """
    interactive_types = ['Button', 'TextBox', 'Slider', 'CheckBox', 
                        'Switch', 'ListView', 'Image', 'ImageSprite']
    count = 0
    
    for component in components:
        if component.get('$Type', '') in interactive_types:
            count += 1
        
        # Recursivamente contar em sub-componentes
        sub_components = component.get('$Components', [])
        if sub_components:
            count += count_interactive_components(sub_components)
    
    return count


def is_spacer_height(height):
    """
    Determina se uma altura espec√≠fica indica um espa√ßador
    """
    if isinstance(height, str):
        # Alturas pequenas em pixels (5-50px s√£o t√≠picas para espa√ßamento)
        if height.isdigit():
            return 5 <= int(height) <= 50
        
        # Percentuais pequenos
        if '%' in height:
            try:
                percentage = int(height.replace('%', ''))
                return 1 <= percentage <= 10
            except:
                return False
    
    return False


def generate_layout_recommendations(layout_analysis):
    """
    Gera recomenda√ß√µes espec√≠ficas baseadas na an√°lise de layout, tipografia e cores
    """
    recommendations = []
    
    if not layout_analysis:
        return recommendations
    
    screens_analyzed = layout_analysis.get('screens_analyzed', 0)
    layout_issues = layout_analysis.get('layout_issues', [])
    typography_issues = layout_analysis.get('typography_issues', [])
    color_issues = layout_analysis.get('color_issues', [])
    has_margin_issues = layout_analysis.get('has_margin_issues', False)
    has_spacing_issues = layout_analysis.get('has_spacing_issues', False)
    has_font_issues = layout_analysis.get('has_font_issues', False)
    has_bold_issues = layout_analysis.get('has_bold_issues', False)
    has_contrast_issues = layout_analysis.get('has_contrast_issues', False)
    has_saturation_issues = layout_analysis.get('has_saturation_issues', False)
    typography_stats = layout_analysis.get('typography_stats', {})
    color_stats = layout_analysis.get('color_stats', {})
    
    if screens_analyzed == 0:
        recommendations.append("‚ö†Ô∏è **N√£o foi poss√≠vel analisar as telas do projeto.** Verifique se o arquivo .aia est√° √≠ntegro.")
        return recommendations
    
    # Relat√≥rio geral
    recommendations.append(f"üìä **{screens_analyzed} tela(s) analisada(s) para padr√µes de layout e tipografia**")
    
    # === RECOMENDA√á√ïES DE LAYOUT ===
    
    # Recomenda√ß√µes espec√≠ficas por tipo de problema
    if has_margin_issues:
        recommendations.append(
            "üìê **Problema de Margens:** Algumas telas n√£o possuem margens adequadas nas laterais. "
            "Recomenda√ß√£o: Use HorizontalArrangement com Labels vazios nas laterais para criar "
            "respiro visual, ou configure componentes com largura espec√≠fica (ex: 80%) em vez de 'Fill Parent'."
        )
    
    if has_spacing_issues:
        recommendations.append(
            "üìè **Problema de Espa√ßamento:** Componentes muito pr√≥ximos entre si detectados. "
            "Recomenda√ß√£o: Adicione Labels vazios com altura de 8-16 pixels entre bot√µes, caixas de texto "
            "e outros elementos interativos para melhorar a legibilidade."
        )
    
    # === RECOMENDA√á√ïES DE TIPOGRAFIA ===
    
    if has_font_issues:
        font_count = typography_stats.get('unique_fonts', 0)
        recommendations.append(
            f"üî§ **Problema de Consist√™ncia Tipogr√°fica:** {font_count} fontes diferentes detectadas. "
            "Recomenda√ß√£o: Use no m√°ximo 2 fontes (uma para t√≠tulos e outra para corpo de texto) "
            "para manter a consist√™ncia visual e profissionalismo."
        )
    
    if has_bold_issues:
        bold_texts_count = typography_stats.get('bold_long_texts', 0)
        recommendations.append(
            f"üìù **Uso Abusivo de Negrito:** {bold_texts_count} texto(s) longo(s) em negrito detectado(s). "
            "Recomenda√ß√£o: Reserve o negrito para destacar palavras-chave ou frases curtas. "
            "Par√°grafos longos em negrito dificultam a leitura."
        )
    
    # Recomenda√ß√µes espec√≠ficas por tela e tipografia
    if layout_issues:
        recommendations.append("üîç **Detalhes de layout por tela:**")
        for issue in layout_issues:
            recommendations.append(f"  ‚Ä¢ {issue}")
    
    if typography_issues:
        recommendations.append("üîç **Detalhes de tipografia:**")
        for issue in typography_issues:
            recommendations.append(f"  ‚Ä¢ {issue}")
    
    # === RECOMENDA√á√ïES DE CORES ===
    
    if has_contrast_issues:
        contrast_violations = color_stats.get('contrast_violations', 0)
        recommendations.append(
            f"üî¥ **Problema de Contraste:** {contrast_violations} viola√ß√£o(√µes) WCAG detectada(s). "
            "Recomenda√ß√£o: Verifique se o texto est√° leg√≠vel sobre o fundo. "
            "Use ferramentas de verifica√ß√£o de contraste ou prefira cores mais escuras para texto "
            "sobre fundos claros, e cores claras para texto sobre fundos escuros."
        )
    
    if has_saturation_issues:
        neon_colors_count = color_stats.get('neon_colors', 0)
        recommendations.append(
            f"üåà **Problema de Satura√ß√£o:** {neon_colors_count} cor(es) muito saturada(s) detectada(s). "
            "Recomenda√ß√£o: Cores neon podem causar fadiga visual. "
            "Prefira tons mais suaves (satura√ß√£o <80%) especialmente para fundos, "
            "textos longos e elementos que ficam vis√≠veis por muito tempo."
        )
    
    # Detalhes de cores
    if color_issues:
        recommendations.append("üîç **Detalhes de an√°lise de cores:**")
        for issue in color_issues:
            recommendations.append(f"  ‚Ä¢ {issue}")
    
    # Dicas proativas
    all_issues_resolved = (not has_margin_issues and not has_spacing_issues and 
                          not has_font_issues and not has_bold_issues and 
                          not has_contrast_issues and not has_saturation_issues)
    
    if all_issues_resolved:
        recommendations.append("‚úÖ **Excelente!** Layout bem estruturado com margens, espa√ßamento, tipografia e cores adequados.")
    else:
        recommendations.append(
            "üí° **Dicas de Design:** "
            "‚Ä¢ Interfaces bem espa√ßadas seguem a regra dos m√∫ltiplos de 8px "
            "‚Ä¢ Use hierarquia tipogr√°fica: t√≠tulos maiores, texto normal menor "
            "‚Ä¢ Mantenha consist√™ncia: mesma fonte para elementos similares "
            "‚Ä¢ Garanta contraste m√≠nimo 4.5:1 entre texto e fundo (WCAG AA) "
            "‚Ä¢ Evite cores muito saturadas para reduzir fadiga visual"
        )
    
    return recommendations


def extract_all_components(screen_data):
    """
    Extrai todos os componentes de uma tela de forma recursiva
    para an√°lise de tipografia
    """
    all_components = []
    
    try:
        properties = screen_data.get('Properties', {})
        components = properties.get('$Components', [])
        
        def extract_recursive(component_list):
            for component in component_list:
                all_components.append(component)
                # Recursivamente extrair subcomponentes
                sub_components = component.get('$Components', [])
                if sub_components:
                    extract_recursive(sub_components)
        
        extract_recursive(components)
        
    except Exception as e:
        print(f"Erro ao extrair componentes: {str(e)}")
    
    return all_components


def analyze_typography(all_components):
    """
    Analisa a tipografia de todos os componentes do projeto
    Implementa as Tarefas 2.1 e 2.2
    """
    # Estat√≠sticas gerais
    font_issues = []
    bold_issues = []
    
    # Para an√°lise de consist√™ncia de fontes
    unique_fonts = set()
    
    # Para an√°lise de uso de negrito
    bold_long_texts = []
    
    # Componentes que podem ter propriedades tipogr√°ficas
    text_components = ['Label', 'Button', 'TextBox', 'Textarea', 'PasswordTextBox']
    
    for component in all_components:
        component_type = component.get('$Type', '')
        component_name = component.get('$Name', 'Unnamed')
        
        if component_type in text_components:
            # Tarefa 2.1: Verificar consist√™ncia de fontes
            font_typeface = component.get('FontTypeface', '')
            if font_typeface and font_typeface.strip():
                unique_fonts.add(font_typeface.strip())
            
            # Tarefa 2.2: Verificar uso abusivo de negrito
            is_bold = component.get('FontBold', 'False')
            text_content = component.get('Text', '')
            
            if str(is_bold).lower() == 'true' and text_content:
                word_count = len(text_content.split())
                if word_count > 15:  # Texto longo em negrito
                    bold_long_texts.append({
                        'component': component_name,
                        'type': component_type,
                        'word_count': word_count,
                        'text_preview': text_content[:50] + '...' if len(text_content) > 50 else text_content
                    })
    
    # Gerar issues espec√≠ficos
    
    # Tarefa 2.1: Verificar se h√° muitas fontes diferentes
    has_font_issues = len(unique_fonts) > 2
    if has_font_issues:
        fonts_list = ', '.join(list(unique_fonts))
        font_issues.append(f"Muitas fontes detectadas: {fonts_list}")
    
    # Tarefa 2.2: Verificar textos longos em negrito
    has_bold_issues = len(bold_long_texts) > 0
    if has_bold_issues:
        for bold_text in bold_long_texts:
            bold_issues.append(
                f"Componente '{bold_text['component']}' ({bold_text['type']}) "
                f"tem {bold_text['word_count']} palavras em negrito: {bold_text['text_preview']}"
            )
    
    # Compilar todas as issues
    all_issues = font_issues + bold_issues
    
    return {
        'issues': all_issues,
        'has_font_issues': has_font_issues,
        'has_bold_issues': has_bold_issues,
        'stats': {
            'unique_fonts': len(unique_fonts),
            'fonts_list': list(unique_fonts),
            'bold_long_texts': len(bold_long_texts),
            'bold_details': bold_long_texts
        }
    }


def check_font_consistency(all_components):
    """
    Tarefa 2.1: Verificar consist√™ncia de fontes
    Garante que o aplicativo n√£o use uma quantidade excessiva de fontes diferentes
    """
    unique_fonts = set()
    text_components = ['Label', 'Button', 'TextBox', 'Textarea', 'PasswordTextBox']
    
    for component in all_components:
        component_type = component.get('$Type', '')
        
        if component_type in text_components:
            font_typeface = component.get('FontTypeface', '')
            if font_typeface and font_typeface.strip():
                unique_fonts.add(font_typeface.strip())
    
    # Se mais de 2 fontes diferentes, retorna False (inconsistente)
    return len(unique_fonts) <= 2, list(unique_fonts)


def check_bold_usage(all_components):
    """
    Tarefa 2.2: Verificar uso abusivo de negrito
    Identifica par√°grafos longos que est√£o inteiramente em negrito
    """
    problematic_components = []
    
    for component in all_components:
        component_type = component.get('$Type', '')
        component_name = component.get('$Name', 'Unnamed')
        
        if component_type == 'Label':  # Focando em Labels que s√£o mais usados para texto
            is_bold = component.get('FontBold', 'False')
            text_content = component.get('Text', '')
            
            if str(is_bold).lower() == 'true' and text_content:
                word_count = len(text_content.split())
                if word_count > 15:  # Limite de 15 palavras
                    problematic_components.append({
                        'name': component_name,
                        'word_count': word_count,
                        'text': text_content
                    })
    
    return len(problematic_components) == 0, problematic_components


def analyze_colors(all_components):
    """
    An√°lise de cores de todos os componentes do projeto
    Implementa as Tarefas 3.1 e 3.2 baseadas em Solecki (2020)
    """
    if not COLOR_ANALYSIS_AVAILABLE:
        return {
            'issues': ['‚ö†Ô∏è An√°lise de cores n√£o dispon√≠vel - bibliotecas n√£o instaladas'],
            'has_contrast_issues': False,
            'has_saturation_issues': False,
            'stats': {}
        }
    
    color_issues = []
    contrast_issues = []
    saturation_issues = []
    
    # Coletar todas as cores √∫nicas do projeto
    all_colors = set()
    contrast_pairs = []
    
    for component in all_components:
        component_type = component.get('$Type', '')
        component_name = component.get('$Name', 'Unnamed')
        
        # Coletar cores de componentes que podem ter texto e fundo
        text_color = component.get('TextColor', '')
        background_color = component.get('BackgroundColor', '')
        button_color = component.get('ButtonColor', '')
        
        # Adicionar cores √∫nicas para an√°lise de satura√ß√£o
        for color in [text_color, background_color, button_color]:
            if color and color.strip():
                all_colors.add(color.strip())
        
        # Verificar contraste entre texto e fundo
        if text_color and background_color:
            contrast_pairs.append({
                'component': component_name,
                'type': component_type,
                'text_color': text_color,
                'background_color': background_color
            })
    
    # Tarefa 3.1: Verificar contraste WCAG
    contrast_analysis = check_color_contrast(contrast_pairs)
    contrast_issues = contrast_analysis['issues']
    
    # Tarefa 3.2: Verificar satura√ß√£o excessiva
    saturation_analysis = check_color_saturation(list(all_colors))
    saturation_issues = saturation_analysis['issues']
    
    # Compilar todas as issues
    all_issues = contrast_issues + saturation_issues
    
    return {
        'issues': all_issues,
        'has_contrast_issues': len(contrast_issues) > 0,
        'has_saturation_issues': len(saturation_issues) > 0,
        'stats': {
            'total_colors': len(all_colors),
            'colors_list': list(all_colors),
            'contrast_violations': len(contrast_issues),
            'neon_colors': len(saturation_issues),
            'contrast_pairs': len(contrast_pairs)
        }
    }


def check_color_contrast(contrast_pairs):
    """
    Tarefa 3.1: Implementar Verificador de Contraste (WCAG)
    Garante que o texto seja leg√≠vel para todos os usu√°rios
    """
    issues = []
    
    if not COLOR_ANALYSIS_AVAILABLE:
        return {'issues': ['Verifica√ß√£o de contraste n√£o dispon√≠vel']}
    
    for pair in contrast_pairs:
        try:
            component_name = pair['component']
            component_type = pair['type']
            text_color = normalize_app_inventor_color(pair['text_color'])
            bg_color = normalize_app_inventor_color(pair['background_color'])
            
            if text_color and bg_color:
                # Normalizar RGB para 0.0-1.0 para wcag-contrast-ratio
                text_color_normalized = [c/255.0 for c in text_color]
                bg_color_normalized = [c/255.0 for c in bg_color]
                
                # Calcular taxa de contraste usando wcag-contrast-ratio
                contrast_ratio = wcag_contrast_ratio.rgb(text_color_normalized, bg_color_normalized)
                
                # Verificar se atende crit√©rio WCAG AA (4.5:1)
                if contrast_ratio < 4.5:
                    issues.append(
                        f"üî¥ **Contraste insuficiente:** Componente '{component_name}' ({component_type}) "
                        f"tem taxa de contraste {contrast_ratio:.2f}:1. "
                        f"Cores: texto {pair['text_color']} sobre fundo {pair['background_color']}. "
                        f"Recomenda√ß√£o: A taxa de contraste deve ser de pelo menos 4.5:1 para atender WCAG AA."
                    )
                
        except Exception as e:
            print(f"Erro ao calcular contraste para {component_name}: {str(e)}")
            continue
    
    return {'issues': issues}


def check_color_saturation(colors_list):
    """
    Tarefa 3.2: Detectar Cores Neon (Satura√ß√£o Excessiva)
    Evita o uso de cores excessivamente vibrantes
    """
    issues = []
    neon_colors = []
    
    if not COLOR_ANALYSIS_AVAILABLE:
        return {'issues': ['Verifica√ß√£o de satura√ß√£o n√£o dispon√≠vel']}
    
    for color_hex in colors_list:
        try:
            # Normalizar cor do App Inventor para RGB
            rgb_color = normalize_app_inventor_color(color_hex)
            if not rgb_color:
                continue
            
            # Converter RGB para HSL usando colour-science
            rgb_normalized = [c/255.0 for c in rgb_color]  # Normalizar para 0-1
            hsl = colour.RGB_to_HSL(rgb_normalized)
            
            hue = hsl[0] * 360      # Convertir para graus (0-360)
            saturation = hsl[1]     # J√° em 0-1
            lightness = hsl[2]      # J√° em 0-1
            
            # Detectar cores "neon": alta satura√ß√£o (>80%) e alta luminosidade (>70%)
            if saturation > 0.8 and lightness > 0.7:
                neon_colors.append({
                    'hex': color_hex,
                    'saturation': saturation * 100,
                    'lightness': lightness * 100
                })
                
        except Exception as e:
            print(f"Erro ao analisar satura√ß√£o da cor {color_hex}: {str(e)}")
            continue
    
    if neon_colors:
        color_list = ', '.join([f"{c['hex']} (S:{c['saturation']:.0f}%, L:{c['lightness']:.0f}%)" 
                                for c in neon_colors])
        issues.append(
            f"üåà **Cores muito saturadas detectadas:** {color_list}. "
            f"Recomenda√ß√£o: Cores neon podem causar fadiga visual. "
            f"Prefira tons mais suaves (satura√ß√£o <80%) para fundos e textos longos."
        )
    
    return {'issues': issues}


def normalize_app_inventor_color(color_value):
    """
    Converte cores do App Inventor para RGB
    App Inventor usa formato &HFF000000 ou &H00000000
    """
    if not color_value or not isinstance(color_value, str):
        return None
    
    color_value = color_value.strip()
    
    try:
        # Formato App Inventor: &HFF000000 (AARRGGBB)
        if color_value.startswith('&H'):
            hex_value = color_value[2:]  # Remove &H
            if len(hex_value) == 8:
                # AARRGGBB - ignorar canal alpha
                r = int(hex_value[2:4], 16)
                g = int(hex_value[4:6], 16)
                b = int(hex_value[6:8], 16)
                return (r, g, b)
            elif len(hex_value) == 6:
                # RRGGBB
                r = int(hex_value[0:2], 16)
                g = int(hex_value[2:4], 16)
                b = int(hex_value[4:6], 16)
                return (r, g, b)
        
        # Formato hexadecimal padr√£o: #RRGGBB
        elif color_value.startswith('#'):
            hex_value = color_value[1:]
            if len(hex_value) == 6:
                r = int(hex_value[0:2], 16)
                g = int(hex_value[2:4], 16)
                b = int(hex_value[4:6], 16)
                return (r, g, b)
        
        # Tentar interpretar como n√∫mero decimal
        elif color_value.isdigit():
            color_int = int(color_value)
            # Converter para RGB (assumir formato ARGB)
            r = (color_int >> 16) & 0xFF
            g = (color_int >> 8) & 0xFF
            b = color_int & 0xFF
            return (r, g, b)
            
    except ValueError:
        pass
    
    return None


def identify_material_icon(image_asset):
    """
    Tarefa 4.1: Identificar se uma imagem √© um √≠cone Material Design e qual estilo
    Retorna o estilo do √≠cone (filled, outlined, round, sharp, twotone) ou None
    """
    try:
        # Carrega a imagem para an√°lise
        with Image.open(image_asset.extracted_file.path) as img:
            # Convert to RGB if necessary
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # Calcular hash da imagem para compara√ß√£o
            img_hash = calculate_image_hash(img)
            
            # Verificar se √© um √≠cone Material Design comparando com a base de dados
            for category_name, icons in MATERIAL_ICONS_DB.items():
                for icon_name, styles in icons.items():
                    for style_name, icon_data in styles.items():
                        # Comparar hash ou similaridade visual
                        if is_similar_to_material_icon(img, icon_data, img_hash):
                            return style_name
            
            return None
            
    except Exception as e:
        print(f"Erro ao identificar √≠cone Material Design para {image_asset.name}: {str(e)}")
        return None


def calculate_image_hash(img):
    """
    Calcula um hash simples da imagem para compara√ß√£o
    """
    try:
        # Redimensiona para 8x8 para compara√ß√£o r√°pida
        img_small = img.resize((8, 8), Image.Resampling.LANCZOS)
        
        # Converte para escala de cinza
        img_gray = img_small.convert('L')
        
        # Calcula a m√©dia dos pixels
        pixels = list(img_gray.getdata())
        avg = sum(pixels) / len(pixels)
        
        # Cria hash bin√°rio baseado na m√©dia
        hash_bits = []
        for pixel in pixels:
            hash_bits.append('1' if pixel > avg else '0')
        
        return ''.join(hash_bits)
    except:
        return None


def is_similar_to_material_icon(img, icon_data, img_hash):
    """
    Verifica se uma imagem √© similar a um √≠cone Material Design
    Por simplicidade, vamos usar o nome do arquivo e caracter√≠sticas b√°sicas
    """
    try:
        # Por enquanto, implementa√ß√£o simplificada baseada em nome e tamanho
        # Em uma implementa√ß√£o completa, seria necess√°rio an√°lise de SVG e compara√ß√£o visual
        
        # Verifica se o tamanho est√° dentro dos padr√µes de √≠cones Material Design
        img_size = img.size
        standard_sizes = [16, 18, 20, 24, 32, 36, 40, 48, 56, 64, 72, 96, 128, 144, 192, 256, 512]
        
        # Se ambas as dimens√µes s√£o iguais (quadrado) e correspondem a tamanhos padr√£o
        if img_size[0] == img_size[1] and img_size[0] in standard_sizes:
            # An√°lise adicional pode ser implementada aqui
            # Por exemplo, an√°lise de cor dominante, presen√ßa de transpar√™ncia, etc.
            return True
            
        return False
    except:
        return False


def analyze_icon_style_consistency(aia_file):
    """
    Tarefa 4.1: Analisar consist√™ncia de estilo dos √≠cones Material Design
    Retorna an√°lise de consist√™ncia e recomenda√ß√µes
    """
    try:
        # Buscar todas as imagens do arquivo AIA que s√£o √≠cones Material Design
        material_icons = aia_file.images.filter(
            is_material_icon=True,
            material_icon_style__isnull=False
        )
        
        if not material_icons.exists():
            return {
                'issues': [],
                'has_style_inconsistency': False,
                'stats': {
                    'total_material_icons': 0,
                    'styles_used': [],
                    'styles_count': 0,
                    'icon_details': []
                }
            }
        
        # Coletar todos os estilos encontrados
        styles_used = set()
        icon_details = []
        
        for icon in material_icons:
            style = icon.material_icon_style
            if style:
                styles_used.add(style)
                icon_details.append({
                    'name': icon.name,
                    'style': style,
                    'asset_type': icon.asset_type
                })
        
        # Filtrar None values
        styles_used = {style for style in styles_used if style is not None}
        
        # Verificar consist√™ncia
        has_inconsistency = len(styles_used) > 1
        issues = []
        
        if has_inconsistency:
            styles_list = ', '.join(sorted(styles_used))
            issues.append(
                f"üé® **Estilos de √≠cones mistos detectados:** {styles_list}. "
                f"Para manter a consist√™ncia visual, escolha e utilize apenas um estilo "
                f"em todo o aplicativo. Recomenda√ß√£o: Use 'filled' para interfaces mais "
                f"tradicionais ou 'outlined' para designs mais modernos e limpos."
            )
            
            # Detalhes por estilo
            for style in sorted(styles_used):
                icons_of_style = [icon for icon in icon_details if icon['style'] == style]
                icon_names = [icon['name'] for icon in icons_of_style]
                issues.append(
                    f"  ‚Ä¢ **Estilo '{style}':** {len(icons_of_style)} √≠cone(s) - "
                    f"{', '.join(icon_names[:3])}"
                    f"{'...' if len(icon_names) > 3 else ''}"
                )
        
        return {
            'issues': issues,
            'has_style_inconsistency': has_inconsistency,
            'stats': {
                'total_material_icons': len(icon_details),
                'styles_used': list(styles_used),
                'styles_count': len(styles_used),
                'icon_details': icon_details
            }
        }
        
    except Exception as e:
        print(f"Erro ao analisar consist√™ncia de estilo dos √≠cones: {str(e)}")
        return {
            'issues': [f'Erro na an√°lise de consist√™ncia de √≠cones: {str(e)}'],
            'has_style_inconsistency': False,
            'stats': {
                'total_material_icons': 0,
                'styles_used': [],
                'styles_count': 0,
                'icon_details': []
            }
        }
